// Code generated by MockGen. DO NOT EDIT.
// Source: client/client.go
//
// Generated by this command:
//
//	mockgen -source client/client.go -destination client/mock/client.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	go_gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGitlabClient is a mock of GitlabClient interface.
type MockGitlabClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitlabClientMockRecorder
}

// MockGitlabClientMockRecorder is the mock recorder for MockGitlabClient.
type MockGitlabClientMockRecorder struct {
	mock *MockGitlabClient
}

// NewMockGitlabClient creates a new mock instance.
func NewMockGitlabClient(ctrl *gomock.Controller) *MockGitlabClient {
	mock := &MockGitlabClient{ctrl: ctrl}
	mock.recorder = &MockGitlabClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitlabClient) EXPECT() *MockGitlabClientMockRecorder {
	return m.recorder
}

// Comment mocks base method.
func (m *MockGitlabClient) Comment(mr *go_gitlab.MergeRequest, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment", mr, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Comment indicates an expected call of Comment.
func (mr_2 *MockGitlabClientMockRecorder) Comment(mr, comment any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "Comment", reflect.TypeOf((*MockGitlabClient)(nil).Comment), mr, comment)
}

// GetConfigFileForMR mocks base method.
func (m *MockGitlabClient) GetConfigFileForMR(mr *go_gitlab.MergeRequest, filePath string) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigFileForMR", mr, filePath)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigFileForMR indicates an expected call of GetConfigFileForMR.
func (mr_2 *MockGitlabClientMockRecorder) GetConfigFileForMR(mr, filePath any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "GetConfigFileForMR", reflect.TypeOf((*MockGitlabClient)(nil).GetConfigFileForMR), mr, filePath)
}

// ListMrsWithLabel mocks base method.
func (m *MockGitlabClient) ListMrsWithLabel(label string) ([]*go_gitlab.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMrsWithLabel", label)
	ret0, _ := ret[0].([]*go_gitlab.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMrsWithLabel indicates an expected call of ListMrsWithLabel.
func (mr *MockGitlabClientMockRecorder) ListMrsWithLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMrsWithLabel", reflect.TypeOf((*MockGitlabClient)(nil).ListMrsWithLabel), label)
}

// MergeMr mocks base method.
func (m *MockGitlabClient) MergeMr(mr *go_gitlab.MergeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeMr", mr)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeMr indicates an expected call of MergeMr.
func (mr_2 *MockGitlabClientMockRecorder) MergeMr(mr any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "MergeMr", reflect.TypeOf((*MockGitlabClient)(nil).MergeMr), mr)
}

// RefreshMr mocks base method.
func (m *MockGitlabClient) RefreshMr(mr *go_gitlab.MergeRequest) (*go_gitlab.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshMr", mr)
	ret0, _ := ret[0].(*go_gitlab.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshMr indicates an expected call of RefreshMr.
func (mr_2 *MockGitlabClientMockRecorder) RefreshMr(mr any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "RefreshMr", reflect.TypeOf((*MockGitlabClient)(nil).RefreshMr), mr)
}
